import { ReactNode } from 'react';

import { EColumnSorting } from '@/components/Table/state/TableState/TableStateContext';

enum EColumnAlign {
    Left = 'left',
    Right = 'right',
    Center = 'center',
}

enum EColumnSize {
    Xs = 'extra-small',
    Sm = 'small',
    Mid = 'medium',
    Lg = 'large',
    Xl = 'extra-large',
}

enum EColumnType {
    Nr = 'nr',
    Number = 'number',
    Date = 'date',
    DateTime = 'datetime',
    String = 'string',
    Text = 'text',
    Unknown = 'unknown',
}

interface IColumnCustomStylingDto {
    align?: EColumnAlign;
    size?: EColumnSize;
}

interface ITableColumnConfig {
    columnDataType?: EColumnType; // For default type styling
    label: string;
    columnId: TColumnId;
    dataAccessor: TDataFieldAccessor;
    onCellClick?: () => void;
    renderData?: () => ReactNode;
    customStylingDto?: IColumnCustomStylingDto;
    isSortable?: boolean;
    isAutoGenerated?: boolean;
}

enum EPositionInRow {
    First = 'first',
    Last = 'last',
}

interface ITableInjectableColumnConfig extends ITableColumnConfig {
    positionInRow: number | EPositionInRow;
}

interface ITableDataItemDto<FieldType> {
    columnKey: string;
    cellData: FieldType;
}

interface ITableRowProps<DtoType> {
    columnConfigList: ITableColumnConfig[];
    dataItem: DtoType;
    rowIndex: number;
    onRowClick?: () => void;
    isRowCountEnabled: boolean;
}

interface ITableProps {
    columnConfigList: ITableColumnConfig[];
    rowData: object[];
    tableConfig: ITableConfig;
}

type TDataFieldAccessFn = <T>(rowData: T) => string | number | null;
type TDataFieldAccessor = string | TDataFieldAccessFn;

type TColumnId = string;
type TTableRowData = Record<TColumnId, string | number | null>;
type TTableData = TTableRowData[];

interface IColumnSortConfig {
    columnId: string;
    sorting: EColumnSorting | null;
}

type TDefaultSortingConfig = IColumnSortConfig[];

interface ITableConfig {
    defaultSorting?: TDefaultSortingConfig;
    isMultiSortEnabled?: boolean;
    isMultiSortingSwitchRender?: boolean;
    isRowCountEnabled?: boolean;
    isSearchEnabled?: boolean;
}

export type {
    TDefaultSortingConfig,
    ITableConfig,
    IColumnSortConfig,
    ITableColumnConfig,
    ITableDataItemDto,
    ITableProps,
    ITableRowProps,
    ITableInjectableColumnConfig,
    TDataFieldAccessor,
    TDataFieldAccessFn,
    TColumnId,
    TTableRowData,
    TTableData,
};
export { EColumnType, EColumnSize, EColumnAlign, EPositionInRow };
